% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/traverse.R
\name{traverse}
\alias{traverse}
\alias{straverse}
\alias{ltraverse}
\title{Apply a function along a traversal}
\usage{
traverse(traversal, f, ...)

straverse(traversal, f, ...)

ltraverse(traversal, f, ...)
}
\arguments{
\item{traversal}{The type of traversal to use.}

\item{f}{An arbitrary function to apply to eac simplex of the traversal. See details.}

\item{...}{unused.}
}
\value{
NULL; for list or vector-valued returns, use \code{ltraverse()} and \code{straverse()} respectively.
}
\description{
Traverses specific subsets of a simplicial complex.
}
\details{
\code{\link[=traverse]{traverse()}} allows for traversing ordered subsets of the simplex tree.
The specific subset and order are determined by the choice of \emph{traversal}: examples include
the \code{\link[=preorder]{preorder()}} traversal, the \code{\link[=cofaces]{cofaces()}} traversal, etc. See the links below.
Each simplex in the traversal is passed as the first and only argument to \code{f}, one per simplex in the traversal.
\code{\link[=traverse]{traverse()}} does nothing with the result; if you want to collect the results of applying \code{f} to each simplex
into a list, use \code{\link[=ltraverse]{ltraverse()}} (or \code{\link[=straverse]{straverse()}}), which are meant to be used like \code{\link[=lapply]{lapply()}}
and \code{\link[=sapply]{sapply()}}, respectively.
}
\examples{
## Starter example complex 
st <- simplex_tree()
st \%>\% insert(list(1:3, 2:5))

## Print out complex using depth-first traversal. 
st \%>\% preorder() \%>\% traverse(print)

## Collect the last labels of each simplex in the tree. 
last_labels <- st \%>\% preorder() \%>\% straverse(function(simplex){ tail(simplex, 1) })
}
\seealso{
Other traversals: 
\code{\link{coface_roots}()},
\code{\link{cofaces}()},
\code{\link{faces}()},
\code{\link{k_simplices}()},
\code{\link{k_skeleton}()},
\code{\link{level_order}()},
\code{\link{link}()},
\code{\link{maximal}()},
\code{\link{preorder}()}
}
\concept{traversals}
