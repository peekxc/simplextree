% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils-combinadic.R
\name{combinadic}
\alias{combinadic}
\alias{nat_to_sub}
\alias{sub_to_nat}
\alias{inverse.choose}
\title{\eqn{k}-combinations and binomial coefficients}
\usage{
nat_to_sub(i, n, k)

sub_to_nat(s, n)

inverse.choose(x, k)
}
\arguments{
\item{i}{vector of integers in the range \code{c(1L, choose(n, k))}.}

\item{n}{integer numerator of the binomial coefficient.}

\item{k}{integer denominator of the binomial coefficient.}

\item{s}{matrix whose columns represent \code{k}-combinations.}

\item{x}{a binomial coefficient \eqn{(n,k)}.}
}
\value{
an integer matrix whose columns give the combinadics of \code{i}
(\code{nat_to_sub}), an integer vector of the positions of the combinations \code{s}
(\code{sub_to_nat}), or the integer numerator of the binomial coefficient \code{x}
(\code{inverse.choose}).
}
\description{
Map between \eqn{k}-combinations of \eqn{n} and their
lexicographic positions, and recover binomial coefficient numerators.
}
\details{
\code{nat_to_sub} computes the \code{i}^th (\code{n} choose \code{k}) combination in the
lexicographic order. \code{sub_to_nat} computes the position of a combination
\code{s} out of all lexicographically-ordered (\code{n} choose \code{k}) combinations. The
values are calculated via a lexicographically-ordered combinadic mapping.

In general, \code{nat_to_sub} is \emph{not} intended to be used to \emph{generate} all
k-combinations in the combinadic mapping. For that, use \link[utils]{combn}.

\code{inverse.choose} inverts the binomial coefficient for general \eqn{(n,k)}.
That is, given the denominator \code{k} and \code{x = choose(n, k)}, find \code{n}.
}
\examples{
library(simplextree)
all(nat_to_sub(seq(choose(100,2)), n = 100, k = 2) == combn(100,2))

## Generating pairwise combinadics is particularly fast
## Below: test to generate ~ 45k combinadics
## (note: better to use microbenchmark)
system.time({
  x <- seq(choose(300,2))
  nat_to_sub(x, n = 300, k = 2L)
})

## Compare with generating raw combinations
system.time(combn(300,2))

100 == inverse.choose(choose(100,2), k = 2)
# TRUE
12345 == inverse.choose(choose(12345, 5), k = 5)
# TRUE
}
\references{
McCaffrey, J. D. "Generating the mth lexicographical element of a
mathematical combination." MSDN Library (2004).
}
